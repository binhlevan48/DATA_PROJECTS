-- Big project for SQL


--Query 01: calculate total visit, pageview, transaction and revenue for Jan, Feb and March 2017 order by month
#standardSQL

SELECT 
      format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      count(totals.visits) as visits,
      sum(totals.pageviews) as pageviews,
      sum(totals.transactions) as transactions,
      sum(totals.totaltransactionRevenue)/1000000 as revenue
     
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170101' and '20170331'
group by month
order by month;



-- Query 02: Bounce rate per traffic source in July 2017
#standardSQL
SELECT  
        trafficSource.source,
        sum( totals.visits),
        sum(totals.bounces),
        (sum(totals.bounces)/sum(totals.visits)) as bounce_rate

FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*` 
where _table_suffix between '20170701' and'20170731'
group by trafficSource.source
order by sum(totals.visits) DESC;



-- Query 3: Revenue by traffic source by week, by month in June 2017
( SELECT 
      case when format_date("%Y%m", parse_date("%Y%m%d", date)) ='201706' then 'month'
      end as timetype,
      format_date("%Y%m", parse_date("%Y%m%d", date)) as time,
      trafficSource.source,
      sum(totals.totaltransactionRevenue)/1000000 as revenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170601' and '20170631'
group by trafficSource.source, time, timetype)
union all
(SELECT
      case when format_date("%Y%W", parse_date("%Y%m%d", date)) <>'201706' then 'week'
      end as timetype,
      format_date("%Y%W", parse_date("%Y%m%d", date)) as time,
      trafficSource.source,
      sum(totals.totaltransactionRevenue)/1000000 as revenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170601' and '20170631'
group by trafficSource.source, time, timetype)
order by revenue desc;



--Query 04: Average number of product pageviews by purchaser type (purchasers vs non-purchasers) in June, July 2017. Note: totals.transactions >=1 for purchaser and totals.transactions is null for non-purchaser
#standardSQL
with a as 
(SELECT 
      format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      fullVisitorID,
      totals.pageviews,
      case 
      when totals.transactions >= 1 then 'purchaser'
      when totals.transactions is null then 'nonpurchaser'
      end as status,
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170601' and '20170731')
select 
      a.month,
      a.status,
      sum(pageviews)/count(distinct fullVisitorId) as avg_pageviews,
from a
group by month, status;



-- Query 05: Average number of transactions per user that made a purchase in July 2017
#standardSQL
SELECT 
       format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
       count(distinct fullVisitorId) as num_of_user,
       sum(totals.transactions) as num_of_transactions,
       sum(totals.transactions)/count(distinct fullVisitorID) as avg_total_transactions_per_user
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170701' and '20170731'
and totals.transactions is not null
group by month;



-- Query 06: Average amount of money spent per session
#standardSQL
SELECT 
      format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      round(avg(totals.totaltransactionRevenue/totals.visits), 2) as avg_revenue_by_user_per_visit
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`
where _table_suffix between '20170701' and '20170731'
      and totals.transactions is not null
group by month;



-- Query 07: Other products purchased by customers who purchased product "YouTube Men's Vintage Henley" in July 2017. Output should show product name and the quantity was ordered.
#standardSQL
select v2ProductName as other_purchased_products,
       sum(productQuantity) as quantity
FROM  `bigquery-public-data.google_analytics_sample.ga_sessions_*`,
      UNNEST (hits) hits,
      UNNEST (hits.product) product
where fullVisitorId in 
      (select distinct fullVisitorId,
       FROM
       `bigquery-public-data.google_analytics_sample.ga_sessions_*`,
        UNNEST (hits) hits,
        UNNEST (hits.product) product
      where product.v2ProductName="YouTube Men's Vintage Henley"
        and productRevenue is not null
        and _table_suffix between '20170701' and '20170731')
and _table_suffix between '20170101' and '20170731'
and productRevenue is not null
and v2ProductName <> "YouTube Men's Vintage Henley"
group by v2ProductName
order by quantity desc;


--Query 08: Calculate cohort map from pageview to addtocart to purchase in last 3 month. For example, 100% pageview then 40% add_to_cart and 10% purchase.
#standardSQL
with a as
(SELECT format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      eCommerceAction.action_type,
      count(eCommerceAction.action_type) as num_product_view
from `bigquery-public-data.google_analytics_sample.ga_sessions_*`,
unnest(hits) hits
where _table_suffix between '20170101' and '20170331'
and eCommerceAction.action_type ='2'
group by month,eCommerceAction.action_type),
b as 
(SELECT format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      eCommerceAction.action_type,
      count(eCommerceAction.action_type) as num_add_to_cart
from `bigquery-public-data.google_analytics_sample.ga_sessions_*`,
unnest(hits) hits
where _table_suffix between '20170101' and '20170331'
and eCommerceAction.action_type ='3'
group by month,eCommerceAction.action_type),
c as 
(SELECT format_date("%Y%m", parse_date("%Y%m%d", date)) as month,
      eCommerceAction.action_type,
      count(eCommerceAction.action_type) as num_purchased
from `bigquery-public-data.google_analytics_sample.ga_sessions_*`,
unnest(hits) hits
where _table_suffix between '20170101' and '20170331'
and eCommerceAction.action_type ='6'
group by month,eCommerceAction.action_type)
select a.month,
      a.num_product_view,
      b.num_add_to_cart,
      c.num_purchased,
      round((b.num_add_to_cart/a.num_product_view)*100, 2) as add_to_cart_rate,
      round((c.num_purchased/a.num_product_view)*100,2) as purchased_rate
from a 
join b
on a.month =b.month
join c
on a.month = c.month
order by month;

